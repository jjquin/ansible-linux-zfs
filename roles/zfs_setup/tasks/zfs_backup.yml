---
- name: Install sanoid on Debian/Ubuntu
  ansible.builtin.apt:
    name: sanoid
    state: present
  when: ansible_facts['os_family'] == "Debian"

- name: Install sanoid on Arch/Manjaro (with yay)
  community.general.aur:
    name: sanoid
    use: yay
    state: present
  when: ansible_facts['os_family'] == "Archlinux"

- name: Ensure /etc/sanoid directory exists
  ansible.builtin.file:
    path: /etc/sanoid
    state: directory
    mode: '0755'

- name: Backup existing sanoid.conf if sanoid-defaults.conf does not exist
  ansible.builtin.copy:
    src: /etc/sanoid/sanoid.conf
    dest: /etc/sanoid/sanoid-defaults.conf
    remote_src: yes
    mode: '0644'
  when: not ansible_facts['files']['/etc/sanoid/sanoid-defaults.conf'] is defined

# Main pool dataset sections
- name: Generate sanoid dataset sections for zroot
  community.general.ini_file:
    path: /etc/sanoid/sanoid.conf
    section: "{{ item.name }}"
    option: use_template
    value: "template_{{ item.template }}"
    mode: '0644'
    state: present
  loop: "{{ sanoid_datasets }}"

# Distroid dataset sections for each distroid
- name: Generate sanoid distroid dataset sections for zroot
  community.general.ini_file:
    path: /etc/sanoid/sanoid.conf
    section: "zroot/ROOT/{{ distroid }}/{{ item.name }}"
    option: use_template
    value: "template_{{ item.template }}"
    mode: '0644'
    state: present
  loop: "{{ sanoid_distroid_datasets }}"
  loop_control:
    loop_var: item
  vars:
    distroid: "{{ distroid_item }}"
  with_items: "{{ zfs_backup_distroids }}"

# Archive pool dataset sections
- name: Generate sanoid dataset sections for archive pools
  community.general.ini_file:
    path: /etc/sanoid/sanoid.conf
    section: "{{ archive_pool }}/backup/{{ hostname }}/{{ item.name }}"
    option: use_template
    value: "template_archive_{{ item.template }}"
    mode: '0644'
    state: present
  loop: "{{ sanoid_datasets }}"
  loop_control:
    loop_var: item
  vars:
    archive_pool: "{{ archive_pool_item }}"
    hostname: "{{ hostname_item }}"
  with_items: "{{ archive_pools }}"
  with_nested:
    - "{{ archive_pools }}"
    - "{{ backup_hostnames }}"

- name: Generate sanoid distroid dataset sections for archive pools
  community.general.ini_file:
    path: /etc/sanoid/sanoid.conf
    section: "{{ archive_pool }}/backup/{{ hostname }}/ROOT/{{ distroid }}/{{ item.name }}"
    option: use_template
    value: "template_archive_{{ item.template }}"
    mode: '0644'
    state: present
  loop: "{{ sanoid_distroid_datasets }}"
  loop_control:
    loop_var: item
  vars:
    archive_pool: "{{ archive_pool_item }}"
    hostname: "{{ hostname_item }}"
    distroid: "{{ distroid_item }}"
  with_items: "{{ zfs_backup_distroids }}"
  with_nested:
    - "{{ archive_pools }}"
    - "{{ backup_hostnames }}"
    - "{{ zfs_backup_distroids }}"

# Template sections
- name: Generate sanoid template sections
  community.general.ini_file:
    path: /etc/sanoid/sanoid.conf
    section: "template_{{ item.0 }}"
    option: "{{ item.1.key }}"
    value: "{{ item.1.value }}"
    mode: '0644'
    state: present
  loop: "{{ sanoid_templates | dict2items | subelements('value') }}"

# External backup scripts, services, and path units
- name: Copy external scripts
  ansible.builtin.copy:
    src: "files/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
  loop: "{{ zfs_setup_external_scripts }}"

- name: Copy external services
  ansible.builtin.copy:
    src: "files/{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    mode: '0644'
  loop: "{{ zfs_setup_external_services }}"
  notify: Reload systemd

- name: Copy zfs-archive path units for all external pools
  ansible.builtin.template:
    src: zfs-archive-path.j2
    dest: "/etc/systemd/system/zfs-archive-{{ item.name }}.path"
    mode: '0644'
  loop: "{{ zfs_setup_external_pools }}"
  notify: Reload systemd
  vars:
    pool: "{{ item.name }}"
    disk_id: "{{ item.by_id }}"

- name: Enable syncoid-replicate timer
  ansible.builtin.systemd:
    name: syncoid-replicate.timer
    enabled: true
    state: started

- name: Enable all zfs-archive path units
  ansible.builtin.systemd:
    name: "zfs-archive-{{ item.name }}.path"
    enabled: true
    state: started
  loop: "{{ zfs_setup_external_pools }}"
