---
- name: Ensure /etc/zfs exists
  ansible.builtin.file:
    path: /etc/zfs
    state: directory
    mode: '0755'

- name: Ensure /etc/zfs/zfs-list.cache exists
  ansible.builtin.file:
    path: /etc/zfs/zfs-list.cache
    state: directory
    mode: '0755'

- name: Ensure zfs-list.cache file for all pools exists
  ansible.builtin.file:
    path: "/etc/zfs/zfs-list.cache/{{ item }}"
    state: touch
    mode: '0644'
  loop: "{{ zfs_setup_pools }}"

- name: Ensure symlink for history_event-zfs-list-cacher.sh exists and is correct
  ansible.builtin.file:
    src: "{{ zfs_setup_list_cacher_target }}"
    dest: "{{ zfs_setup_list_cacher_symlink }}"
    state: link
    force: true

- name: Gather ZFS pool facts
  community.general.zpool_facts:
    pool: "{{ zfs_setup_pool }}"
  register: zpool_facts

- name: Set zpool cachefile if needed
  ansible.builtin.command: "zpool set cachefile=/etc/zfs/zpool.cache {{ zfs_setup_pool }}"
  changed_when: false
  when: zpool_facts.ansible_facts.ansible_zfs_setup_pools[0].cachefile != "/etc/zfs/zpool.cache"

- name: Stat /etc/hostid
  ansible.builtin.stat:
    path: /etc/hostid
  register: hostid_stat

- name: Slurp /etc/hostid if present
  ansible.builtin.slurp:
    path: /etc/hostid
  register: hostid_slurp
  when: hostid_stat.stat.exists

- name: Compare /etc/hostid to desired value
  ansible.builtin.set_fact:
    hostid_needs_update: >-
      {{
        (not hostid_stat.stat.exists)
        or
        (
          hostid_stat.stat.exists and
          (hostid_slurp.content | b64decode)
          !=
          (zfs_setup_hostid | lower | regex_replace('^0x', '') | to_uuid | to_bytes(length=4, byteorder='big'))
        )
      }}
  when: hostid_stat.stat.exists

- name: Generate /etc/hostid if missing or incorrect
  ansible.builtin.command: "zgenhostid -f {{ zfs_setup_hostid }}"
  changed_when: true
  when: hostid_needs_update | default(true)

- name: Ensure ZFS systemd services are enabled and started
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
    daemon_reload: true
  loop:
    - zfs-import-cache.service
    - zfs.target
    - zfs-import.target
    - zfs-zed.service

- name: Ensure dracut config for ZFS is present
  ansible.builtin.copy:
    dest: /etc/dracut.conf.d/zol.conf
    mode: '0644'
    content: |
      nofsck="yes"
      add_dracutmodules+=" zfs "
      omit_dracutmodules+=" btrfs "
  notify: Regenerate initramfs

- name: Configure ZFS ARC max
  ansible.builtin.copy:
    dest: /etc/modprobe.d/zfs.conf
    content: |
      options zfs zfs_setup_arc_max={{ (ansible_memtotal_mb * 1024 * 1024 * zfs_setup_arc_max_percent) | int }}
    mode: '0644'
  notify: Reload systemd

- name: Configure journald override for zfs
  ansible.builtin.copy:
    dest: /etc/systemd/journald.conf.d/zfs.conf
    content: |
      [Journal]
      Storage=persistent
      Compress=no
      SystemMaxSize=250M
      SystemMaxFileSize=50M
    mode: '0644'
  notify: Restart journald

- name: Ensure logrotate does not compress logs
  ansible.builtin.lineinfile:
    path: /etc/logrotate.conf
    regexp: '^compress$'
    state: absent

- name: Ensure nocompress is present in logrotate.conf
  ansible.builtin.lineinfile:
    path: /etc/logrotate.conf
    line: 'nocompress'
    state: present

# Check for zfs-scrub@.service in all standard locations
- name: Check for zfs-scrub@.service in all standard locations
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - /etc/systemd/system/zfs-scrub@.service
    - /usr/lib/systemd/system/zfs-scrub@.service
    - /lib/systemd/system/zfs-scrub@.service
  register: zfs_setup_scrub_service_checks

- name: Set fact if zfs-scrub@.service exists
  ansible.builtin.set_fact:
    zfs_setup_scrub_service_exists: "{{ zfs_setup_scrub_service_checks.results | selectattr('stat.exists') | list | length > 0 }}"

- name: Copy zfs-scrub@.service if missing everywhere
  ansible.builtin.copy:
    src: files/zfs-scrub@.service
    dest: /etc/systemd/system/zfs-scrub@.service
    mode: '0644'
  when: not zfs_setup_scrub_service_exists

# Check for zfs-scrub-monthly@.timer in all standard locations
- name: Check for zfs-scrub-monthly@.timer in all standard locations
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - /etc/systemd/system/zfs-scrub-monthly@.timer
    - /usr/lib/systemd/system/zfs-scrub-monthly@.timer
    - /lib/systemd/system/zfs-scrub-monthly@.timer
  register: zfs_setup_scrub_monthly_timer_checks

- name: Set fact if zfs-scrub-monthly@.timer exists
  ansible.builtin.set_fact:
    zfs_setup_scrub_monthly_timer_exists: "{{ zfs_setup_scrub_monthly_timer_checks.results | selectattr('stat.exists') | list | length > 0 }}"

- name: Copy zfs-scrub-monthly@.timer if missing everywhere
  ansible.builtin.copy:
    src: files/zfs-scrub-monthly@.timer
    dest: /etc/systemd/system/zfs-scrub-monthly@.timer
    mode: '0644'
  when: not zfs_setup_scrub_monthly_timer_exists

# Enable the monthly scrub timer for all pools
- name: Enable ZFS monthly scrub timer for all pools
  ansible.builtin.systemd:
    name: "zfs-scrub-monthly@{{ item }}.timer"
    enabled: true
    state: started
  loop: "{{ zfs_setup_pools }}"
